// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// E2EServiceClient is the client API for E2EService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type E2EServiceClient interface {
	DeployNode(ctx context.Context, in *DeployNodeRequest, opts ...grpc.CallOption) (*DeployNodeResponse, error)
	DeployValidator(ctx context.Context, in *DeployValidatorRequest, opts ...grpc.CallOption) (*DeployValidatorResponse, error)
	NodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*NodeListResponse, error)
	NodeStatus(ctx context.Context, in *NodeStatusRequest, opts ...grpc.CallOption) (*NodeStatusResponse, error)
}

type e2EServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewE2EServiceClient(cc grpc.ClientConnInterface) E2EServiceClient {
	return &e2EServiceClient{cc}
}

func (c *e2EServiceClient) DeployNode(ctx context.Context, in *DeployNodeRequest, opts ...grpc.CallOption) (*DeployNodeResponse, error) {
	out := new(DeployNodeResponse)
	err := c.cc.Invoke(ctx, "/proto.E2EService/DeployNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2EServiceClient) DeployValidator(ctx context.Context, in *DeployValidatorRequest, opts ...grpc.CallOption) (*DeployValidatorResponse, error) {
	out := new(DeployValidatorResponse)
	err := c.cc.Invoke(ctx, "/proto.E2EService/DeployValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2EServiceClient) NodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*NodeListResponse, error) {
	out := new(NodeListResponse)
	err := c.cc.Invoke(ctx, "/proto.E2EService/NodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2EServiceClient) NodeStatus(ctx context.Context, in *NodeStatusRequest, opts ...grpc.CallOption) (*NodeStatusResponse, error) {
	out := new(NodeStatusResponse)
	err := c.cc.Invoke(ctx, "/proto.E2EService/NodeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// E2EServiceServer is the server API for E2EService service.
// All implementations must embed UnimplementedE2EServiceServer
// for forward compatibility
type E2EServiceServer interface {
	DeployNode(context.Context, *DeployNodeRequest) (*DeployNodeResponse, error)
	DeployValidator(context.Context, *DeployValidatorRequest) (*DeployValidatorResponse, error)
	NodeList(context.Context, *NodeListRequest) (*NodeListResponse, error)
	NodeStatus(context.Context, *NodeStatusRequest) (*NodeStatusResponse, error)
	mustEmbedUnimplementedE2EServiceServer()
}

// UnimplementedE2EServiceServer must be embedded to have forward compatible implementations.
type UnimplementedE2EServiceServer struct {
}

func (UnimplementedE2EServiceServer) DeployNode(context.Context, *DeployNodeRequest) (*DeployNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployNode not implemented")
}
func (UnimplementedE2EServiceServer) DeployValidator(context.Context, *DeployValidatorRequest) (*DeployValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployValidator not implemented")
}
func (UnimplementedE2EServiceServer) NodeList(context.Context, *NodeListRequest) (*NodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeList not implemented")
}
func (UnimplementedE2EServiceServer) NodeStatus(context.Context, *NodeStatusRequest) (*NodeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeStatus not implemented")
}
func (UnimplementedE2EServiceServer) mustEmbedUnimplementedE2EServiceServer() {}

// UnsafeE2EServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to E2EServiceServer will
// result in compilation errors.
type UnsafeE2EServiceServer interface {
	mustEmbedUnimplementedE2EServiceServer()
}

func RegisterE2EServiceServer(s grpc.ServiceRegistrar, srv E2EServiceServer) {
	s.RegisterService(&E2EService_ServiceDesc, srv)
}

func _E2EService_DeployNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2EServiceServer).DeployNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.E2EService/DeployNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2EServiceServer).DeployNode(ctx, req.(*DeployNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2EService_DeployValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2EServiceServer).DeployValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.E2EService/DeployValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2EServiceServer).DeployValidator(ctx, req.(*DeployValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2EService_NodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2EServiceServer).NodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.E2EService/NodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2EServiceServer).NodeList(ctx, req.(*NodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2EService_NodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2EServiceServer).NodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.E2EService/NodeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2EServiceServer).NodeStatus(ctx, req.(*NodeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// E2EService_ServiceDesc is the grpc.ServiceDesc for E2EService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var E2EService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.E2EService",
	HandlerType: (*E2EServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeployNode",
			Handler:    _E2EService_DeployNode_Handler,
		},
		{
			MethodName: "DeployValidator",
			Handler:    _E2EService_DeployValidator_Handler,
		},
		{
			MethodName: "NodeList",
			Handler:    _E2EService_NodeList_Handler,
		},
		{
			MethodName: "NodeStatus",
			Handler:    _E2EService_NodeStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/server/proto/service.proto",
}
